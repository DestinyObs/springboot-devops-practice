pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'destinyobs'
        IMAGE_NAME = 'user-registration-microservice'
        BUILD_NUMBER = "${env.BUILD_NUMBER}"
        DOCKER_HUB_CREDENTIALS = credentials('docker-hub-credentials')
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 15, unit: 'MINUTES')
    }
    
    stages {
        stage('Checkout') {
            steps {
                git credentialsId: 'github-credentials', 
                    branch: 'main', 
                    url: 'https://github.com/DestinyObs/springboot-devops-practice.git'
            }
        }
        
        stage('Docker Build, Test & Push') {
            steps {
                script {
                    sh """
                        # Login to Docker Hub
                        echo \$DOCKER_HUB_CREDENTIALS_PSW | docker login -u \$DOCKER_HUB_CREDENTIALS_USR --password-stdin
                        
                        # Build with cache for speed
                        docker build --cache-from ${DOCKER_REGISTRY}/${IMAGE_NAME}:dev-latest \
                            -t ${DOCKER_REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER} \
                            -t ${DOCKER_REGISTRY}/${IMAGE_NAME}:dev-latest .
                        
                        # Push images in parallel for speed
                        docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER} &
                        docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:dev-latest &
                        wait
                    """
                }
            }
        }
        
        stage('Deploy') {
            steps {
                sh """
                    docker-compose down || true
                    docker-compose up -d
                    docker image prune -f
                """
            }
        }
        
        stage('Health Check') {
            steps {
                script {
                    timeout(time: 2, unit: 'MINUTES') {
                        retry(4) {
                            sleep 15
                            sh 'curl -f --max-time 5 http://localhost:8989/api/v1/health'
                        }
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo 'ðŸŽ‰ Deployment successful!'
            build job: 'user-registration-test', wait: false
        }
        cleanup {
            sh 'docker system prune -f'
        }
    }
}
